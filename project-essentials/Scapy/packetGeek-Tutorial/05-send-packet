Let’s talk a bit about sniffing first and how existing packets are our best tool for creating new ones.

1. sniff,sniff,sniff,...
-----------------------------------------------------------------------------------------------------
>> Little bit more about the sniff(), Arguments for sniff func
    count: Number of packets to capture. 0 means infinity.
    iface: Sniff for packets only on the provided interface.
    prn: Function to apply to each packet. If something is returned, it is displayed. For instance you can use prn = lambda x: x.summary().
    store: Whether to store sniffed packets or discard them. When you only want to monitor your network forever, set store to 0.
    timeout: Stop sniffing after a given time (default: None).
    filter: Wireshark filters. Check BPF syntax online if needed.	

>> Sniffing ARP
pkts = sniff(count=5, filter="arp")
pkts.summary()
pkts[0].show()
pkts[0].command()


2. Build a packet
------------------------------------------------------------------------------------------------------
>> It looks like ARP packets only have 2 layers plus padding that we have to worry about. We can use the ls() function on the Ether and ARP layers to see what options are available to us.
ls(Ether)
ls(ARP)

>> Let’s create our ARP packet
arppkt = Ether()/ARP()
arppkt[ARP].hwsrc = "00:11:22:aa:bb:cc"
arppkt[ARP].pdst = "172.16.20.1"
arppkt[Ether].dst = "ff:ff:ff:ff:ff:ff"
arppkt

>> Note that the special glue holding these packets together is the / operator. If you happen to forget a layer when you’re first defining the packet, you can add on a layer very easily using the existing packet
>>> tcppkt = Ether()/IP()
>>> tcppkt
<Ether  type=0x800 |<IP  |>>
>>> tcppkt = tcppkt/TCP()
>>> tcppkt
<Ether  type=0x800 |<IP  frag=0 proto=tcp |<TCP  |>>>


3. Send custom packet
------------------------------------------------------------------------------------------------------
>> sendp() for L2 and send() for L3. Check wireshark.
sendp(arppkt)
OR
sendp(Ether(dst="ff:ff:ff:ff:ff:ff",src="00:11:22:aa:bb:cc")/ARP(hwsrc="00:11:22:aa:bb:cc",pdst="172.16.20.1"))

>> Arguments for sendp() and send()

    iface: The interface to send the packets out from.
    inter: Time in seconds to wait between 2 packets.
    loop: Send the packets endlessly if not 0.
    pkts: Can be a packet, an implicit packet or a list of them.









